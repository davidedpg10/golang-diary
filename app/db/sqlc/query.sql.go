// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO entries (title, message, mood) VALUES ($1, $2, $3) RETURNING id, title, message, mood, created_at
`

type CreateEntryParams struct {
	Title   string   `json:"title"`
	Message string   `json:"message"`
	Mood    []string `json:"mood"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, createEntry, arg.Title, arg.Message, pq.Array(arg.Mood))
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Message,
		pq.Array(&i.Mood),
		&i.CreatedAt,
	)
	return i, err
}

const deleteEntry = `-- name: DeleteEntry :one
DELETE FROM entries WHERE id = $1 RETURNING id, title, message, mood, created_at
`

func (q *Queries) DeleteEntry(ctx context.Context, id int32) (Entry, error) {
	row := q.db.QueryRowContext(ctx, deleteEntry, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Message,
		pq.Array(&i.Mood),
		&i.CreatedAt,
	)
	return i, err
}

const getEntry = `-- name: GetEntry :one
SELECT id, title, message, mood, created_at FROM entries WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEntry(ctx context.Context, id int32) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntry, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Message,
		pq.Array(&i.Mood),
		&i.CreatedAt,
	)
	return i, err
}

const listEntries = `-- name: ListEntries :many
SELECT id, title, message, mood, created_at FROM entries ORDER BY created_at DESC
`

func (q *Queries) ListEntries(ctx context.Context) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, listEntries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Message,
			pq.Array(&i.Mood),
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEntry = `-- name: UpdateEntry :one
UPDATE entries SET title = $1, message = $2 , mood = $3 WHERE id = $4 RETURNING id, title, message, mood, created_at
`

type UpdateEntryParams struct {
	Title   string   `json:"title"`
	Message string   `json:"message"`
	Mood    []string `json:"mood"`
	ID      int32    `json:"id"`
}

func (q *Queries) UpdateEntry(ctx context.Context, arg UpdateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, updateEntry,
		arg.Title,
		arg.Message,
		pq.Array(arg.Mood),
		arg.ID,
	)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Message,
		pq.Array(&i.Mood),
		&i.CreatedAt,
	)
	return i, err
}
